[{"/Users/Coco/assignment-06-lotion-dominico25/src/index.js":"1","/Users/Coco/assignment-06-lotion-dominico25/src/App.js":"2","/Users/Coco/assignment-06-lotion-dominico25/src/reportWebVitals.js":"3","/Users/Coco/assignment-06-lotion-dominico25/src/Sidebar.js":"4","/Users/Coco/assignment-06-lotion-dominico25/src/Main.js":"5"},{"size":953,"mtime":1678425014426,"results":"6","hashOfConfig":"7"},{"size":5312,"mtime":1678428398268,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1677975764084,"results":"9","hashOfConfig":"7"},{"size":1328,"mtime":1678425014425,"results":"10","hashOfConfig":"7"},{"size":5352,"mtime":1678425014425,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"12ygtqa",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"15"},"/Users/Coco/assignment-06-lotion-dominico25/src/index.js",[],[],[],"/Users/Coco/assignment-06-lotion-dominico25/src/App.js",["30"],[],"import {useEffect, useState} from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Main from \"./Main\";\nimport uuid from \"react-uuid\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nfunction App() {\n  \n  const data = JSON.parse(localStorage.getItem('notesStorage'));\n  const [notes, setNotes] = useState(data || []);\n  useEffect(() => {\n    localStorage.setItem('notesStorage', JSON.stringify(notes));\n  }, [notes])\n\n  \n\n  const [activeNote, setActiveNote] = useState(false);\n\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  const navigate = useNavigate();\n\n  console.log(notes)\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: \"Untitled Note\",\n      body: \"\",\n      lastModified: Date.now(),\n    };\n    setNotes([newNote, ...notes]);\n    navigate(`/notes/${newNote.id}`)\n  };\n\n  const onUpdateNote = (updatedNote) => {\n    const updatedNotesArray = notes.map((note) => {\n      if (note.id === activeNote) {\n        return updatedNote;\n      }\n\n      return note;\n      \n    });\n    \n    setNotes(updatedNotesArray);\n\n  }\n\n  // useEffect(()=>{\n  //   localStorage.setItem(\"notes\", JSON.stringifynotes)\n  // },[])\n\n  const findIndex = (array, uniquedId) => {\n    for (let i=0 ; i < array.length; i++) {\n        if ((array[i].id) === uniquedId) {\n            return i;\n        }\n    }\n}\n\n  const onDeleteNote = (idToDelete) => {\n    const ans = window.confirm(\"Are you sure you want to delete this note?\");\n    if(ans) {\n      if (notes.length > 1) {\n        const index = findIndex(notes, idToDelete)\n        notes.splice(index, 1);\n        localStorage.setItem('notesStorage', JSON.stringify(notes));\n        navigate(`/notes/${notes[0].id}`, {replace : true})\n      }\n      else {\n        notes.splice(0, 1);\n          localStorage.setItem('notesStorage', JSON.stringify(notes));\n          navigate(`/notes`, {replace : true})\n      }\n    }\n  }\n\n  const getActiveNote = () => {\n    return notes.find((note) => note.id === activeNote);\n  }\n/*\n  const showSidebar = () => {\n    const sidebar = document.querySelector('.Sidebar');\n    sidebar.style.display = (sidebar.style.display === 'none') ? 'block' : 'none';\n  }*/\n\n  const toggleSidebar = () => {\n    setShowSidebar(!showSidebar);\n  }\n\n  \n/*\n  const onSaveNote = (idToSave) => {\n    \n  }*/\n\n  return (\n    <div> \n      <header>\n        <div class = \"items\">\n          <button type=\"button\" id=\"info\" class = \"buttons\" onClick = {toggleSidebar} >\n            <div class = \"lines\"></div>\n            <div class = \"lines\"></div>\n            <div class = \"lines\"></div>\n          </button>\n        </div>\n        <div>\n          <h1 class = \"center\">Lotion</h1>\n          <h6 class = \"center\">Like Notion, but worse.</h6>\n        </div>\n        <div class = \"items\"></div>\n      </header>\n      <div class = \"mainnn\">\n        {showSidebar && (\n          <Sidebar\n            id = \"side\"\n            notes = {notes}\n            onAddNote = {onAddNote}\n            onDeleteNote = {onDeleteNote}\n            activeNote = {activeNote}\n            setActiveNote = {setActiveNote}> \n          </Sidebar>\n        )}\n        \n        <Main\n          activeNote = {getActiveNote()}\n          onUpdateNote = {onUpdateNote}\n          onDeleteNote = {onDeleteNote}>\n        </Main>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n\n\n\n    /*\n    <body> \n      <header>\n        <div id = \"items\">\n          <button class = \"menu-button\">\n            <div class = \"menu\"></div>\n            <div class = \"menu\"></div>\n            <div class = \"menu\"></div>\n          </button>\n        </div>\n        <div>\n          <h1 class = \"center\">Lotion</h1>\n          <h6 class = \"center\">Like Notion, but worse.</h6>\n        </div>\n        <div class = \"menu-button\"></div>\n\n      </header>\n    </body>\n    */\n\n    /*<body>\n      <header>\n        <button>\n          <div class = \"menu\"></div>\n          <div class = \"menu\"></div>\n          <div class = \"menu\"></div>\n        </button>\n        <div>\n          <h1>Lotion</h1>\n          <h6>Like Notion, but worse.</h6>\n        </div>\n      </header>\n    </body>*/\n\n    /*\n    <div class = \"content\">\n        <div id = \"middle\">\n          <aside id = \"main-screen\">\n          </aside>\n          <aside id = \"rules-info\">\n            <ul id = \"how-to-play\">\n              <li><strong>How To Play</strong></li>\n              <li>- Start typing. The letters will appear in the boxes</li>\n              <li>- Remove letters with Backspace</li>\n              <li>- Hit Enter/Return tp submit an answer</li>\n              <li>- Letters with green background are in the right spot</li>\n              <li>- Letters with yellow background exist in the word, but are in the wrong spots</li>\n              <li>- Letters with gray background do not exist in the word</li>\n              <li>- If you need a hint, click the ? icon</li>\n            </ul>\n          </aside>\n        </div>\n      </div>\n      */\n      /*\n      <div class = \"mainnn\">\n        <div class = \"left\">\n          <div class = \"left-title\">\n\n          </div>\n          <div class = \"left-body\">\n\n          </div>\n        </div>\n        <div class = \"right\">\n          <div class = \"right-title\">\n\n          </div>\n          <div class = \"right-body\">\n            \n          </div>\n        </div>\n      </div>*/\n      \n\n","/Users/Coco/assignment-06-lotion-dominico25/src/reportWebVitals.js",[],[],"/Users/Coco/assignment-06-lotion-dominico25/src/Sidebar.js",[],[],"/Users/Coco/assignment-06-lotion-dominico25/src/Main.js",["31","32"],[],"import ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"./custom-quill.css\";\nimport {useState} from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n//const[isEditMode, setIsEditMode] = useState[true];\n\nfunction Main({notes, activeNote, onUpdateNote, onDeleteNote, isExistingNote}) {\n    const [lastSaveDate, setLastSaveDate] = useState(null);\n    const [isEditMode, setIsEditMode] = useState(true);\n    const navigate = useNavigate();\n    const onEditField = (key, value) => {\n        onUpdateNote({\n            ...activeNote,\n            [key]: value,\n            lastModified: Date.now(),\n        }, () => {\n            setLastSaveDate(new Date());\n        });\n        const titleInput = document.getElementById(\"title\");\n        titleInput.style.outline = \"none\";\n        setIsEditMode(true);\n        navigate(`/notes/${activeNote.id}/edit`);\n    };\n\n   \n\n    if(!activeNote) return <div class = \"no-active-note\">No note selected</div>\n    \n    return (\n        <div class = \"app-main\">\n            {isEditMode ? (\n                <div class = \"app-main-note-edit\">\n                    <header class = \"title-header\">\n                        <div class = \"left-main-header\">\n                            <input\n                                type = \"text\"\n                                id = \"title\"\n                                value = {activeNote.title}\n                                onChange = {(e) => onEditField(\"title\", e.target.value)}\n                                autoFocus>\n                            </input>\n                            <small class = \"note-meta\">\n                                Last modified {new Date(activeNote.lastModified).toLocaleDateString(\"en-GB\", {\n                                    hour: \"2-digit\",\n                                    minute: \"2-digit\",\n                                })}\n                            </small>\n                        </div>\n                        <div class = \"right-main-header\">\n                            {isEditMode ? (\n                                <button class = \"header-save-button\" onClick = {() => {setIsEditMode(false); setLastSaveDate(new Date()); }}>Save</button>\n                            ) : (\n                                <button id = \"edit-button\" onClick = {() => setIsEditMode(true)}>Edit</button>\n                            )}\n                                <button class = \"header-delete-button\" onClick = {() => onDeleteNote(activeNote.id)}>Delete</button>\n                        </div>\n                        \n                    </header>\n\n                    <div id = \"edit-quill\">\n                        <ReactQuill\n                            id = \"body\"\n                            placeholder = \"Your note here...\"\n                            value = {activeNote.body}\n                            onChange = {(value) => onEditField(\"body\", value)}\n                            modules={{\n                                toolbar: [\n                                [{ 'header': [1, 2, false] }],\n                                ['bold', 'italic', 'underline', 'strike'],\n                                [{'list': 'ordered'}, {'list': 'bullet'}],\n                                [{'script': 'sub'}, {'script': 'super'}],\n                                [{'indent': '-1'}, {'indent': '+1'}],\n                                [{ 'align': [] }],\n                                ['clean']\n                                ],\n                            }}>\n                        </ReactQuill>\n                    </div>\n                </div>\n            ) : (\n            <div class = \"app-main-note-preview\">\n                <header class = \"title-header\">\n                    <div class = \"left-main-header\">\n                        <h1 class = \"preview-title\">{activeNote.title}</h1>\n                        <small class = \"note-meta\">\n                            Last modified {new Date(activeNote.lastModified).toLocaleDateString(\"en-GB\", {\n                                hour: \"2-digit\",\n                                minute: \"2-digit\",\n                            })}\n                        </small>\n                    </div>\n                    <div class = \"right-main-header\">\n                        {isEditMode ? (\n                            <button class = \"header-save-button\" onClick = {() => {setIsEditMode(false); setLastSaveDate(new Date()); }}>Save</button>\n                        ) : (\n                            <button class = \"header-edit-button\" onClick = {() => setIsEditMode(true)}>Edit</button>\n                        )}\n                            <button class = \"header-delete-button\" onClick = {() => onDeleteNote(activeNote.id)}>Delete</button>\n                    </div>\n                    \n                </header>\n                <div dangerouslySetInnerHTML = {{__html: activeNote.body}} class = \"markdown-preview\"></div>\n            </div>\n            )}\n        </div>\n        );\n    \n    \n\n}\n\nexport default Main;\n\n/*\nmodules={{\n    toolbar: [\n      [{ 'header': [1, 2, false] }],\n      ['bold', 'italic', 'underline', 'strike'],\n      [{'list': 'ordered'}, {'list': 'bullet'}],\n      [{'script': 'sub'}, {'script': 'super'}],\n      [{'indent': '-1'}, {'indent': '+1'}],\n      [{ 'align': [] }],\n      ['clean']\n    ],\n  }}>*/",{"ruleId":"33","severity":1,"message":"34","line":5,"column":23,"nodeType":"35","messageId":"36","endLine":5,"endColumn":32},{"ruleId":"33","severity":1,"message":"34","line":5,"column":23,"nodeType":"35","messageId":"36","endLine":5,"endColumn":32},{"ruleId":"33","severity":1,"message":"37","line":9,"column":12,"nodeType":"35","messageId":"36","endLine":9,"endColumn":24},"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'lastSaveDate' is assigned a value but never used."]